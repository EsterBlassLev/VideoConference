{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet ParticipantListComponent = class ParticipantListComponent {\n  constructor(_participantService, _cdr, _router) {\n    this._participantService = _participantService;\n    this._cdr = _cdr;\n    this._router = _router;\n    this.participantsjudge = [];\n    this.participantsOthers = [];\n    this.recordedChunks = [];\n  }\n\n  ngOnInit() {\n    // this.subscribtion=this._participantService.getAllParticipants().subscribe(data=>{\n    //   this.participants=data;\n    //   this._cdr.detectChanges();\n    // })\n    this.participantsjudge = this._participantService.getAllParticipantsjudge();\n    this.participantsOthers = this._participantService.getAllParticipantsOthers();\n    this.videoElement = document.getElementById('videoElement');\n  }\n\n  details(participant) {\n    this._router.navigate([\"/participant/\" + participant.id]);\n  }\n\n  toggleCamera() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.cameraStream) {\n        this.cameraStream.getTracks().forEach(track => track.stop());\n        this.videoElement.srcObject = null;\n        this.cameraStream = undefined;\n      } else {\n        navigator.mediaDevices.getUserMedia({\n          video: true\n        }).then(stream => {\n          this.videoElement.srcObject = stream;\n          this.cameraStream = stream;\n        }).catch(error => {\n          console.log('Error accessing camera:', error);\n        });\n      }\n    });\n  }\n\n  displayScreen(part) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.screenStream = yield navigator.mediaDevices.getDisplayMedia({\n          video: true\n        });\n        this.videoElement.srcObject = this.screenStream;\n      } catch (error) {\n        console.error('Error displaying screen:', error);\n      }\n\n      part.sharedScreen = !part.sharedScreen;\n    });\n  }\n\n  stopDisplay(part) {\n    part.sharedScreen = !part.sharedScreen;\n\n    if (this.screenStream) {\n      this.screenStream.getTracks().forEach(track => track.stop());\n      this.videoElement.srcObject = null;\n      this.screenStream = null;\n    }\n  }\n\n  startScreenRecording(part) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.screenStream = yield navigator.mediaDevices.getDisplayMedia({\n          video: true\n        });\n        this.mediaRecorder = new MediaRecorder(this.screenStream);\n\n        this.mediaRecorder.ondataavailable = event => {\n          if (event.data.size > 0) {\n            this.recordedChunks.push(event.data);\n          }\n        };\n\n        this.mediaRecorder.start();\n        part.recording = !part.recording;\n      } catch (error) {\n        console.error('Error starting screen recording:', error);\n      } // part.recording =!part.recording;\n\n    });\n  }\n\n  stopScreenRecording(part) {\n    // part.recording=!part.recording;\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n    }\n\n    this.downloadRecording();\n  }\n\n  downloadRecording() {\n    const blob = new Blob(this.recordedChunks, {\n      type: 'video/webm'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'screen-recording.webm';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n\n};\n\n__decorate([ViewChild('video', {\n  static: true\n})], ParticipantListComponent.prototype, \"video\", void 0);\n\nParticipantListComponent = __decorate([Component({\n  selector: 'app-participant-list.component',\n  templateUrl: 'participant-list.component.html',\n  styleUrls: ['./participant-list.component.scss'] //אם היתה לי אפשרות הייתי עושה את זה כאן וכן הייתי כותבת את מה שכתבתי בהמשך שלא רלוונ.lטי כרגע\n  //changeDetection: ChangeDetectionStrategy.Default\n\n})], ParticipantListComponent);\nexport { ParticipantListComponent };","map":null,"metadata":{},"sourceType":"module"}